<% include ../partials/header %>
<!--SPINNER-->
  <div class="chargement">
    <div class="d-flex justify-content-center">
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <p> Please wait, the loading may take a few seconds </p>
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
      <div class="spinner-grow spinner-grow-sm text-secondary" role="status">
        <span class="sr-only">Loading...</span>
      </div>
    </div>
  </div>

<!--FORMULAIRE DE SELECTION DU PROJET BIMSYNC-->
  <form class="container" action="/projects/by_project" method="POST">
      <div class="form-group choose_form">
        <label for="projects">Choose a project</label>
        <select class="form-control" id="projects" name="project_id">
          <option value="" disabled selected>Select a project...</option>
          <% projects.forEach(function(project){ %>
            <option value="<%= project.id %>"><%= project.name %></option>
          <% }); %>
        </select>
        <input type="submit" class="btn btn-info" value="Show me the dashboard">
      </div>
  </form>

<!-- ==================================================================== -->

<!-- Si le champs userNB n'est pas vide, c'est à dire si une requête à été faite pour un projet précis-->
<!-- Afficher le tableau de bord -->

<% if (usersNb) { %>
  <div class="container"> <!-- Partie contenant les Grand chiffre en tête de tableau de bord -->

    <div class="projectName">
      <h5><%= projectName %></h5>
    </div>

    <!-- Nombre de membre du projet -->
    <div class="d-sm-block d-md-flex justify-content-around">
      <div id="jumboUsers" class="jumbotron sm-col-12 md-col-3 m-1">
         <span class="number"><%= usersNb %></span> <br>Users
         <!--EXPORT LISTE UTILISATEURS EN EXCEL -->
         <% var usersSTR =  JSON.stringify(usersList) %>
         <button type="button" class="btn btn-outline-dark p-1" name="excelExport"
            style="font-size:0.6em"
            onclick="exportUsers(<%=usersSTR%>, headers, fileTitle)">
            <i class="fas fa-download"></i> Export list
         </button>
      </div>

      <!-- Nombre de models -->
      <div id="jumboModels" class="jumbotron sm-col-12 md-col-3 m-1">
         <span class="number"><%= labelmodel.length %></span> <br>models
      </div>

      <!-- Nombre de sujets -->
      <div id="jumboTopics" class="jumbotron sm-col-12 md-col-3 m-1">
         <span class="number"><%= topics.length %></span> <br>Topics
      </div>

      <!-- Date de la dernière mise à jour du projet BIMSYNC -->
      <div id="jumboUpdate" class="jumbotron sm-col-12 md-col-4 m-1">
         <span class="number"><%= projectLastUpdate %></span> <br>Last update
      </div>
    </div>

    <!-- Canvas pour afficher le doughnut des révisions par modèles -->
    <div class="row d-flex justify-content-around">
      <div id="chart1" class="myChart">
        <canvas id="myChart1"></canvas>
      </div>
    </div>

    <!-- Canvas pour afficher le bargraph des sujets par mois -->
    <div class="row d-flex justify-content-around">
      <div id="chart2" class="myChart">
        <canvas id="myChart2"></canvas>
      </div>
    </div>

  </div>

  <script type="text/javascript"> // script pour afficher le graphique donnant le nombre de révision par modèle

    // On récupère les données transmise par le backend et on les retransforme en string pour ètre compris dans le script
    var labelmodelSTR = <%- JSON.stringify(labelmodel) %>;
    var backgroundColorsmodelSTR = <%- JSON.stringify(backgroundColorsmodel) %>;
    var borderColorsmodelSTR = <%- JSON.stringify(borderColorsmodel) %>;

    var testLegend = true;
    if (<%=datamodel.length%> > 12){
      testLegend = false;
    }
    var width = window.innerWidth;
    if (width < 800){
      testLegend = false;
    }

    // Script Chart.js
    var ctx = document.getElementById('myChart1').getContext('2d');
    var chart = new Chart(ctx, {
      type: 'doughnut',
      data: {
          labels: labelmodelSTR,
          datasets: [{
              label: "Types of revisions",
              backgroundColor: backgroundColorsmodelSTR,
              borderColor: borderColorsmodelSTR,
              data: [<%=datamodel%>],
          }]
      },
      options: {
        title: {
            display: true,
            text: 'Number of revisions by type of models',
        },
        legend: {
          display: testLegend,
          position: 'bottom'
        }
      }
    });

  </script>

  <script type="text/javascript"> // script pour afficher le graphique donnant le nombre de sujets par jumboTopics
    //stringify les topics
    var topicsSTR = <%- JSON.stringify(topics) %>;
    //Prépare les variables nécessaire pour le script organizeData
    var months = [];
    var topicsDate = []
    var topicsNb = [];
    var topicsCumulated = [];
    // On organise les données des topics pour les restituer au graph Chart.js
    function organizeData (){
      topicsSTR.forEach(function(topic){
         var date = new Date(topic.creation_date);
         months.push(date);
      });
      orderedDates = months.sort(function(a,b){
       return Date.parse(a) > Date.parse(b);
       })
      orderedDates.forEach(function(date){
         var realDate = (date.toLocaleString('en-us', { month: 'long' })) + ' ' +  date.getFullYear();
         var nvx = true;
         if(topicsDate.length !== 0){
           for (i = 0; i < topicsDate.length ; i++){
             if (realDate === topicsDate[i]){
               topicsNb[i] += 1;
               nvx = false;
             }
           }
         }
         if(nvx){
           topicsNb.push(1),
           topicsDate.push(realDate);
           // backgroundColorsmodel.push('#15191f');
           // borderColorsmodel.push('#15191f');
         }
        topicsNb.reduce(function(a,b,i) { return topicsCumulated[i] = a+b; },0);
      })
    }

    //On joue le script organizeData
    organizeData()

    // Script Chart.js
    var ctx = document.getElementById('myChart2').getContext('2d');
    var chart = new Chart(ctx, {
      type: 'bar',
      data: {
          labels: topicsDate,
          datasets: [{
              label: "by month",
              data: topicsNb,
              backgroundColor: '#ed5d72'
          },
          {
              label: "cumulated",
              data: topicsCumulated,
              type: 'line',
              backgroundColor: 'rgba(0, 0, 0, 0)',
              borderColor: '#f2ae58'
          }]
      },
      options: {
        title: {
            display: true,
            text: 'Topics by month'
        },
        legend: {
          display: true,
          position: 'bottom'
        },
        scales: {
            yAxes: [{
                barThickness:20,
                ticks: {
                    beginAtZero:true
                }
            }],
            xAxes:[{
              gridLines:{
                display:false
              },
              ticks: {
                autoSkip: false
              }
            }]
        }
      }
    });

  </script>

<% } %>

<% include ../partials/footer %>
